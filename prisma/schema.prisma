generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id                String      @id @default(cuid())
  name              String?
  email             String?     @unique
  emailVerified     DateTime?
  image             String?
  password          String?
  role              String      @default("user")
  shopifyCustomerId String?
  address           String?
  city              String?
  country           String?     @default("TN")
  phone             String?
  postalCode        String?
  createdAt         DateTime    @default(now())
  updatedAt         DateTime?   @updatedAt
  status            String      @default("active")
  accounts          Account[]
  orders            Order[]
  sessions          Session[]
  blogPosts         BlogPost[]
  bulkQuotes        BulkQuote[]
  postViews         PostView[]
  quotes            Quote[]
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Order {
  id                 String      @id @default(cuid())
  userId             String
  orderNumber        String      @unique
  shopifyOrderId     String?
  status             String
  total              Float
  createdAt          DateTime    @default(now())
  updatedAt          DateTime    @updatedAt
  bankReceiptPath    String?
  currency           String      @default("TND")
  paymentMethod      String?
  shippingAddress    String?
  shippingCity       String?
  shippingCountry    String?
  shippingPostalCode String?
  user               User        @relation(fields: [userId], references: [id])
  items              OrderItem[]
}

model OrderItem {
  id        String  @id @default(cuid())
  orderId   String
  productId String
  title     String
  price     Float
  quantity  Int
  image     String?
  order     Order   @relation(fields: [orderId], references: [id], onDelete: Cascade)
}

model Quote {
  id              String   @id @default(cuid())
  userId          String
  productId       String
  quantity        Int
  basePrice       Float
  discount        Float    @default(0)
  finalPrice      Float
  paymentMethod   String
  bankReceiptPath String?
  status          String   @default("pending")
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt
  user            User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("quotes")
}

model BulkQuote {
  id              String   @id @default(cuid())
  userId          String
  items           String
  totalQuantity   Int
  subtotal        Float
  discount        Float    @default(0)
  total           Float
  paymentMethod   String
  bankReceiptPath String?
  status          String   @default("pending")
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt
  user            User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("bulk_quotes")
}

model BlogPost {
  id            String        @id @default(cuid())
  title         String
  slug          String        @unique
  excerpt       String?
  content       String
  featuredImage String?
  published     Boolean       @default(false)
  authorId      String
  categoryId    String?
  views         Int           @default(0)
  createdAt     DateTime      @default(now())
  updatedAt     DateTime      @updatedAt
  images        String[]      @default([])
  author        User          @relation(fields: [authorId], references: [id])
  category      BlogCategory? @relation(fields: [categoryId], references: [id])
  postViews     PostView[]
  tags          BlogTag[]     @relation("BlogPostTags")

  @@map("blog_posts")
}

model BlogCategory {
  id          String     @id @default(cuid())
  name        String     @unique
  slug        String     @unique
  description String?
  createdAt   DateTime   @default(now())
  updatedAt   DateTime   @updatedAt
  posts       BlogPost[]

  @@map("blog_categories")
}

model BlogTag {
  id        String     @id @default(cuid())
  name      String     @unique
  slug      String     @unique
  createdAt DateTime   @default(now())
  updatedAt DateTime   @updatedAt
  posts     BlogPost[] @relation("BlogPostTags")

  @@map("blog_tags")
}

model PostView {
  id        String   @id @default(cuid())
  postId    String
  userId    String?
  ipAddress String?
  userAgent String?
  viewedAt  DateTime @default(now())
  post      BlogPost @relation(fields: [postId], references: [id], onDelete: Cascade)
  user      User?    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("post_views")
}

model Invoice {
  id               String           @id @default(cuid())
  invoiceNumber    String           @unique
  companyName      String
  matriculeFiscale String?
  contactPerson    String
  email            String
  phone            String
  address          String
  invoiceDate      DateTime
  dueDate          DateTime
  status           InvoiceStatus    @default(DRAFT)
  subtotal         Float            @default(0)
  totalDiscount    Float            @default(0)
  printingCosts    Float            @default(0)
  total            Float            @default(0)
  currency         String           @default("TND")
  createdAt        DateTime         @default(now())
  updatedAt        DateTime         @updatedAt
  items            InvoiceItem[]
  printing         InvoicePrinting?

  @@index([invoiceNumber])
  @@index([companyName])
  @@index([status])
  @@index([invoiceDate])
  @@index([createdAt])
  @@map("invoices")
}

model InvoiceItem {
  id          String   @id @default(cuid())
  invoiceId   String
  productId   String
  productName String
  quantity    Int
  unitPrice   Float
  discount    Float    @default(0)
  total       Float    @default(0)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  invoice     Invoice  @relation(fields: [invoiceId], references: [id], onDelete: Cascade)

  @@index([invoiceId])
  @@index([productId])
  @@map("invoice_items")
}

model InvoicePrinting {
  id                   String   @id @default(cuid())
  invoiceId            String   @unique
  includePrinting      Boolean  @default(false)
  dimensions           String?
  printingPricePerUnit Float    @default(0)
  quantity             Int      @default(0)
  total                Float    @default(0)
  notes                String?
  createdAt            DateTime @default(now())
  updatedAt            DateTime @updatedAt
  invoice              Invoice  @relation(fields: [invoiceId], references: [id], onDelete: Cascade)

  @@index([invoiceId])
  @@map("invoice_printing")
}

model ContactMessage {
  id        String   @id @default(cuid())
  name      String
  email     String
  phone     String?
  company   String?
  subject   String?
  message   String
  status    String   @default("unread") // unread, read, replied
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([status])
  @@index([createdAt])
  @@map("contact_messages")
}

enum InvoiceStatus {
  DRAFT
  SENT
  PAID
  OVERDUE
  CANCELLED
}
